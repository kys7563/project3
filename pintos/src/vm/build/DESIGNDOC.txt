       	       	    +---------------------------+
		    |		CS 140		|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Park Seunggon  - psg9707@kaist.ac.kr
Kim Yongsik  - kys7563@kaist.ac.kr
---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

We did not implement extra credit.
We tried to implement swapping, but cannot implement properly. (FAILED MANY TESTS)
(Maybe synchronization is not properly implemented)

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Pintos slide(KR,ENG)

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
In page.h

struct vm_entry{
	uint8_t type; // type of vm entry (BINARY, FILE, ANONYMOUS)
	void *vaddr; // virtual address
	bool writable; 

	bool is_loaded;
	struct file* file;

	struct list_elem mmap_elem; 

	size_t offset;
	size_t read_bytes;
	size_t zero_bytes;

	size_t swap_slot;

	struct hash_elem elem;

	bool pinned;
}; 
vm_entry is a supplementary data structure to store information for allocating each page

struct mmap_file{
	int mapid;
	struct file* file;
	struct list_elem elem;
	struct list vme_list;
};

mmap_file is a data structure that has information from mmaped files

struct page {
	void *kaddr;
	struct vm_entry *vme;
	struct thread *thread;
	struct list_elem lru; //swapping mechanism
};

global variables for constructing lru list in every thread
in thread* files
lru_list;
lru_list_lock;

for synchronization when swapping
swap_lock;


page is a data structure that represents physical page that contains a user page

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

Page fault -> check if fault address is valid -> handle mm_fault ->
depending on vme type, handle_mm_fault deals the fault differntly.
If the type of vme is BIN or FILE, we load file on the memory. If it is ANON, we swap in the file to the memory.

After loading file or swapping file on the memory, we call 'install page' that adds a mapping from user page to physical pages into page table.

 
>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

If pagedir_is_dirty() is true, meaning that dirty bit is set, we write the modified page on the disk.
If pagedir_is_accessed() is true, meaning that the page is recently accessed, we did not choose that page to evict based on lru swapping policy.


---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

We implemented a new lock structure pg_lock, and used it when page_fault is called.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

The struct vm entry is used for virtual-to-physical mappings. 
vm entry is needed in order to put the necessary information into the page table.
Thread structure has a hash structure containing vm entries, which could be found by searching virtual address.
We thought hash structure is efficient.
 
		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We wrote all data structures in A1.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We used lru based swapping mechanism.
We managed lru list containing all pages. 
Page to evict is decided by get_next_lru_clock call. get_next_lru_clock searches from beginning of the lru list.
At try_to_free_page call, we find a page and evict it.
If the page decieded to be evicted is pinned, we search again to find next page to evict.
   

 
>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

When evicting a page, pagedir_clear_page, free_page is called, removing and freeing all the data of page.
Therefore, when process P obtains a frame that is previously used, there is no problem.


>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

When page fault is occured, we check if fault address is valid or not
We also check if fault address esp-32(STACK_HEURISTIC) and stack growth makes a stack larger than 8MB, and deny stack growth.
 

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

When open/write a file, we use filesys_lock for synchronization.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

We use lru_list_lock when inserting/delete page to/from lru_list.  
When interrupt(context switch) occurs during inserting/deleting a page, undesirable page may be inserted/deleted to/from page.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

We used pinned flag in vm entry. We set the flag to 1 every system call.
When choosing a page to evict, a page whose pinned flag is set is not chosen to be evicted.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

If access to paged-out pages happens during system call, page fault occurs.
In page fault, we check fault address' validity, and if it's valid, we handle the fault by handle_mm_fault.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We added lru_list_lock as well as filesys_lock which was implemented in project2.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
 We wrote all data structures in A1.
---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

page fualt에서 mmap file은 file에위치한 disk block sector에서 data를 읽어온다
eviction에서는 swap할 필요가 없고, dirty bit이 1이 되었을 때 disk에 파일이 위치한 장소에 data를 write한다.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.e

mmap system call checks the argument's address whether there is vm entry with corresponding address.
If it exists, it means a new file mapping overlaps an existing segment.


---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

Similarity:
For both executable files and mmaped files, there's no need to swap disk when they're evicted.
We should only check the dirty bit and write the updated data to the file when the dirty bit is set.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
